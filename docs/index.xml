<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memo</title>
    <link>https://sn2562.github.io/blog/</link>
    <description>Recent content on Memo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>UTF-8</language>
    <lastBuildDate>Thu, 06 Jul 2017 23:45:20 +0900</lastBuildDate>
    
	<atom:link href="https://sn2562.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HiveQL触り始めて初めて複合型と出会いましたメモ</title>
      <link>https://sn2562.github.io/blog/post/20170706_hiveql/</link>
      <pubDate>Thu, 06 Jul 2017 23:45:20 +0900</pubDate>
      
      <guid>https://sn2562.github.io/blog/post/20170706_hiveql/</guid>
      <description>最近HiveQLを触り始めたんですけれど、初めて複合型のarray〜とかstract〜と出会って戸惑ったので、そのメモです。
そもそもHiveQLってなーに  HDFS上に保存されたデータをテーブルとして見做しMapReduceを意識することなく、データを操作することができる SQLライクに書くことができる Facebook製   複合型？ プリミティブ型(整数型とか文字列型)の他にも指定できる複合型があります。構造体・マップ・配列の3種類が利用できます。
構造体 STRUCT  STRUCT&amp;lt;要素名:型, …&amp;gt; で定義 要素はピリオドで要素名を指定して取得
# 構造体の各要素に要素名でアクセス &amp;gt; select s.col1, s.col2 from s2; 11 aa   マップ型 MAP  Map&amp;lt;keyの型, valueの型&amp;gt; で定義 値は角括弧でキーを指定して取得 存在しないキーの場合はNULLを返す size関数でマップの要素数を取得
# MAPの各値にKEY名でアクセス &amp;gt; select m[&#39;b&#39;], m[&#39;zzz&#39;] from m1; 1 NULL # MAPの要素数を取得 &amp;gt; select size(m) from m1; 3   配列型 ARRAY  ARRAY&amp;lt;型&amp;gt; で定義 配列の要素は角括弧で添字を指定して取得 添字には負の数は指定できない 配列サイズを超えた添字の場合はNULLを返す 配列サイズはsize関数で取得 explode関数で配列の要素毎に処理を行う posexplode関数で配列の各要素とインデックス番号を取得して処理を行う  # 配列の各要素に添字でアクセス &amp;gt; select a[0], a[2], a[3] from a1; aa cc NULL # 配列の要素数を取得 &amp;gt; select size(a) from a1; 3 # explode関数で配列の要素を行として展開 &amp;gt; select explode(a) e from a1; aa bb cc # LATERAL VIEW句+posexplode関数で各要素とインデックス番号を取得 &amp;gt; LATERAL VIEW (item_ids) item_ids_table AS item_index, itemId  複合型と便利な機能 explode関数、及びposexplode関数  配列型、MAP型はexplode関数でその値やkey値を展開 配列型はposexplode関数で配列の添字と一緒に値を展開  # explode関数で配列の要素を行として展開 &amp;gt; select explode(a) as col from a1; # とか &amp;gt; select explode(array(&#39;aa&#39;,&#39;bb&#39;,&#39;cc&#39;)) as col; | col | | ------ | | aa | | bb | | cc | # explode関数でMAPの要素を行として展開 &amp;gt; select explode(map(&#39;A&#39;,10,&#39;B&#39;,20,&#39;C&#39;,30)) as key,val; | key | val | | ------ | ------ | | A | 10 | | B | 20 | | C | 30 | # posexplode関数で配列の要素を添え字といっしょに展開 &amp;gt; select posexplode(array(&#39;aa&#39;,&#39;bb&#39;,&#39;cc&#39;)) as (pos,val); | pos | val | | ------ | ------ | | 0 | aa | | 1 | bb | | 2 | cc |  上記は対象のカラムが1つしか無いのですが、普通はたくさんのカラムがあるので以下のようになります。</description>
    </item>
    
    <item>
      <title>hugoに数式を導入する</title>
      <link>https://sn2562.github.io/blog/post/20170624_hugo/</link>
      <pubDate>Sat, 24 Jun 2017 19:50:38 +0900</pubDate>
      
      <guid>https://sn2562.github.io/blog/post/20170624_hugo/</guid>
      <description>HUGO MathJax 公式の導入ドキュメント． 日本語で書いてくれている人もいた．MathJax の導入 ここの通りにやればできる．  MathJaxってなーに HTMLやMarkdownのソースにLaTeX形式の構文で数式が書けるようにするJavaScriptライブラリ．
MathJaxの導入 HUGO上でこのライブラリを読み込んで動かすのはすごく簡単．ページにMathJaxライブラリを読みこむ設定をする．themesフォルダにあるテンプレート下のlayouts/partials/footer.htmlに以下を追記する．
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt; &amp;lt;/script&amp;gt;  ちなみにMathJaxの公式はここ．2017/4/25でCDNのホスティングサイト閉じてしまっているらしかった．記事の中ほどで現在は https://cdn.rawgit.com/mathjax/MathJax/2.7.1/MathJax.js で公開中と紹介されていた．
ヒント Markdownと記法が競合するので，ここまでの設定では必ず数式を書く時は\でエスケープしなければいけない．長い数式を書く時には\がいっぱいになっちゃって大変． あとはインラインにしたい時&amp;lt;div&amp;gt;で囲う話しとか．そのへんのヒントが公式サイトにまとめられている．
layouts/partials/footer.html
&amp;lt;!-- MathJax --&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&amp;quot;\\(&amp;quot;,&amp;quot;\\)&amp;quot;]] } }); &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]], displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]], processEscapes: true, processEnvironments: true, skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;], TeX: { equationNumbers: { autoNumber: &amp;quot;AMS&amp;quot; }, extensions: [&amp;quot;AMSmath.</description>
    </item>
    
    <item>
      <title>ドットインストール-PHP入門 メモ</title>
      <link>https://sn2562.github.io/blog/post/20170618_php/</link>
      <pubDate>Sun, 18 Jun 2017 19:45:21 +0900</pubDate>
      
      <guid>https://sn2562.github.io/blog/post/20170618_php/</guid>
      <description>ドットインストール / PHP入門をお勉強したのでメモ．
01 PHPを使ってみよう PHPバージョンの確認
$ php -v  PHP 5.6.30 (cli) (built: Mar 11 2017 09:56:18) Copyright (c) 1997-2016 The PHP Group Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies with Xdebug v2.5.4, Copyright (c) 2002-2017, by Derick Rethans  02 はじめてのPHPプログラム 開始タグと終了タグ1 &amp;lt;?php ?&amp;gt;  コメント //コメント /* コメント コメント コメント */  03 ビルトインWebサーバーを使ってみよう phpファイルを見るにはビルドインサーバが必要．phpが用意してくれている簡易サーバを使ってビルドする．
自分のipアドレスを確認する $ ifconfig  ビルドインサーバを立ち上げる $ php -S 192.168.33.100:8000  PHP 5.</description>
    </item>
    
    <item>
      <title>GitHub Pages &#43; Hugoで日記を公開する</title>
      <link>https://sn2562.github.io/blog/post/20170618_gh/</link>
      <pubDate>Sun, 18 Jun 2017 17:19:15 +0900</pubDate>
      
      <guid>https://sn2562.github.io/blog/post/20170618_gh/</guid>
      <description>GitHubでブログを公開している人たちがいてカッコイイ！と思ったのでやってみる．
使用技術  Hugo  Hugo ブログとかポートフォリオみたいなサイトを作るサイトジェネレータ．Go製． .mdとか書いたらいい感じにサイトっぽくしたヤツをつくってくれる.  GitHub Pages  GitHub Pages githubのリポジトリ下にhtmlファイルとかおいて公開できる．   Hugoを使ってみる 基本的にはHugo Quickstart Guideを見ながら進めれば大丈夫．不安になったらhugo + Github Pagesでブログ作成に挑戦した話やHugoとGitHub Pagesで静的サイトを公開するが丁寧に教えてくれているので参考にする．だいたいは新しいページを作ってローカル環境で確認後Github Pagesで公開するって流れだった．
Quickstart Guideのメモ Step 3. 記事の追加 記事コンテンツを新しく追加したいときはhugo newコマンドを使う.
$ hugo new post/poyo.md  これでcontent/post下にpoyo.mdが生成されるので書き換えて記事をつくる．
+++ date = &amp;quot;2017-06-18T16:11:58+05:30&amp;quot; draft = true title = &amp;quot;poyo&amp;quot; +++ 記事の内容.  +++で囲まれた所をfront matterっていって記事の設定とかができるらしい．記事内容はその下に書いていく．
 date 日付 draft 記事の下書き設定．デフォルトはtrue． title 記事の表示タイトル image 記事のキャッチとして画像urlを文字列で設定できる．画像の置場所はstatic/images下．  Step 4. hugo起動 - Step 5.</description>
    </item>
    
  </channel>
</rss>